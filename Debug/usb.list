
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039cc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000017c  20000000  08003c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000012d4  2000017c  08003db4  0002017c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001450  08003db4  00021450  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000100a8  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000286e  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae0  00000000  00000000  00032ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000998  00000000  00000000  000335a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001e1ee  00000000  00000000  00033f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000099d2  00000000  00000000  00052126  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009b1dc  00000000  00000000  0005baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000f6cd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a8c  00000000  00000000  000f6d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000017c 	.word	0x2000017c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b98 	.word	0x08003b98

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000180 	.word	0x20000180
 8000220:	08003b98 	.word	0x08003b98

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b97a 	b.w	8000530 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	460e      	mov	r6, r1
 800025c:	4604      	mov	r4, r0
 800025e:	9d08      	ldr	r5, [sp, #32]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d150      	bne.n	8000306 <__udivmoddi4+0xb2>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d96c      	bls.n	8000344 <__udivmoddi4+0xf0>
 800026a:	fab2 fe82 	clz	lr, r2
 800026e:	f1be 0f00 	cmp.w	lr, #0
 8000272:	d00b      	beq.n	800028c <__udivmoddi4+0x38>
 8000274:	f1ce 0c20 	rsb	ip, lr, #32
 8000278:	fa01 f60e 	lsl.w	r6, r1, lr
 800027c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000280:	fa02 f70e 	lsl.w	r7, r2, lr
 8000284:	ea4c 0c06 	orr.w	ip, ip, r6
 8000288:	fa00 f40e 	lsl.w	r4, r0, lr
 800028c:	0c3a      	lsrs	r2, r7, #16
 800028e:	fbbc f9f2 	udiv	r9, ip, r2
 8000292:	b2bb      	uxth	r3, r7
 8000294:	fb02 cc19 	mls	ip, r2, r9, ip
 8000298:	fb09 fa03 	mul.w	sl, r9, r3
 800029c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002a0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002a4:	45b2      	cmp	sl, r6
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x6a>
 80002a8:	19f6      	adds	r6, r6, r7
 80002aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80002ae:	f080 8125 	bcs.w	80004fc <__udivmoddi4+0x2a8>
 80002b2:	45b2      	cmp	sl, r6
 80002b4:	f240 8122 	bls.w	80004fc <__udivmoddi4+0x2a8>
 80002b8:	f1a9 0902 	sub.w	r9, r9, #2
 80002bc:	443e      	add	r6, r7
 80002be:	eba6 060a 	sub.w	r6, r6, sl
 80002c2:	fbb6 f0f2 	udiv	r0, r6, r2
 80002c6:	fb02 6610 	mls	r6, r2, r0, r6
 80002ca:	fb00 f303 	mul.w	r3, r0, r3
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80002d4:	42a3      	cmp	r3, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x98>
 80002d8:	19e4      	adds	r4, r4, r7
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 810b 	bcs.w	80004f8 <__udivmoddi4+0x2a4>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	f240 8108 	bls.w	80004f8 <__udivmoddi4+0x2a4>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	2100      	movs	r1, #0
 80002ee:	1ae4      	subs	r4, r4, r3
 80002f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d062      	beq.n	80003be <__udivmoddi4+0x16a>
 80002f8:	2300      	movs	r3, #0
 80002fa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fe:	602c      	str	r4, [r5, #0]
 8000300:	606b      	str	r3, [r5, #4]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0xc6>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d055      	beq.n	80003ba <__udivmoddi4+0x166>
 800030e:	2100      	movs	r1, #0
 8000310:	e885 0041 	stmia.w	r5, {r0, r6}
 8000314:	4608      	mov	r0, r1
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	f040 808f 	bne.w	8000442 <__udivmoddi4+0x1ee>
 8000324:	42b3      	cmp	r3, r6
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xda>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80fc 	bhi.w	8000526 <__udivmoddi4+0x2d2>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb66 0603 	sbc.w	r6, r6, r3
 8000334:	2001      	movs	r0, #1
 8000336:	46b4      	mov	ip, r6
 8000338:	2d00      	cmp	r5, #0
 800033a:	d040      	beq.n	80003be <__udivmoddi4+0x16a>
 800033c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	b912      	cbnz	r2, 800034c <__udivmoddi4+0xf8>
 8000346:	2701      	movs	r7, #1
 8000348:	fbb7 f7f2 	udiv	r7, r7, r2
 800034c:	fab7 fe87 	clz	lr, r7
 8000350:	f1be 0f00 	cmp.w	lr, #0
 8000354:	d135      	bne.n	80003c2 <__udivmoddi4+0x16e>
 8000356:	2101      	movs	r1, #1
 8000358:	1bf6      	subs	r6, r6, r7
 800035a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800035e:	fa1f f887 	uxth.w	r8, r7
 8000362:	fbb6 f2fc 	udiv	r2, r6, ip
 8000366:	fb0c 6612 	mls	r6, ip, r2, r6
 800036a:	fb08 f002 	mul.w	r0, r8, r2
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000374:	42b0      	cmp	r0, r6
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x134>
 8000378:	19f6      	adds	r6, r6, r7
 800037a:	f102 33ff 	add.w	r3, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x132>
 8000380:	42b0      	cmp	r0, r6
 8000382:	f200 80d2 	bhi.w	800052a <__udivmoddi4+0x2d6>
 8000386:	461a      	mov	r2, r3
 8000388:	1a36      	subs	r6, r6, r0
 800038a:	fbb6 f0fc 	udiv	r0, r6, ip
 800038e:	fb0c 6610 	mls	r6, ip, r0, r6
 8000392:	fb08 f800 	mul.w	r8, r8, r0
 8000396:	b2a3      	uxth	r3, r4
 8000398:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x15c>
 80003a0:	19e4      	adds	r4, r4, r7
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x15a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80b9 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0xa0>
 80003ba:	4629      	mov	r1, r5
 80003bc:	4628      	mov	r0, r5
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003c6:	f1ce 0320 	rsb	r3, lr, #32
 80003ca:	fa26 f203 	lsr.w	r2, r6, r3
 80003ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80003d2:	fbb2 f1fc 	udiv	r1, r2, ip
 80003d6:	fa1f f887 	uxth.w	r8, r7
 80003da:	fb0c 2211 	mls	r2, ip, r1, r2
 80003de:	fa06 f60e 	lsl.w	r6, r6, lr
 80003e2:	fa20 f303 	lsr.w	r3, r0, r3
 80003e6:	fb01 f908 	mul.w	r9, r1, r8
 80003ea:	4333      	orrs	r3, r6
 80003ec:	0c1e      	lsrs	r6, r3, #16
 80003ee:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003f2:	45b1      	cmp	r9, r6
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x1ba>
 80003fa:	19f6      	adds	r6, r6, r7
 80003fc:	f101 32ff 	add.w	r2, r1, #4294967295
 8000400:	f080 808c 	bcs.w	800051c <__udivmoddi4+0x2c8>
 8000404:	45b1      	cmp	r9, r6
 8000406:	f240 8089 	bls.w	800051c <__udivmoddi4+0x2c8>
 800040a:	3902      	subs	r1, #2
 800040c:	443e      	add	r6, r7
 800040e:	eba6 0609 	sub.w	r6, r6, r9
 8000412:	fbb6 f0fc 	udiv	r0, r6, ip
 8000416:	fb0c 6210 	mls	r2, ip, r0, r6
 800041a:	fb00 f908 	mul.w	r9, r0, r8
 800041e:	b29e      	uxth	r6, r3
 8000420:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000424:	45b1      	cmp	r9, r6
 8000426:	d907      	bls.n	8000438 <__udivmoddi4+0x1e4>
 8000428:	19f6      	adds	r6, r6, r7
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	d271      	bcs.n	8000514 <__udivmoddi4+0x2c0>
 8000430:	45b1      	cmp	r9, r6
 8000432:	d96f      	bls.n	8000514 <__udivmoddi4+0x2c0>
 8000434:	3802      	subs	r0, #2
 8000436:	443e      	add	r6, r7
 8000438:	eba6 0609 	sub.w	r6, r6, r9
 800043c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000440:	e78f      	b.n	8000362 <__udivmoddi4+0x10e>
 8000442:	f1c1 0720 	rsb	r7, r1, #32
 8000446:	fa22 f807 	lsr.w	r8, r2, r7
 800044a:	408b      	lsls	r3, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa26 f407 	lsr.w	r4, r6, r7
 8000454:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000458:	fbb4 f9fe 	udiv	r9, r4, lr
 800045c:	fa1f fc83 	uxth.w	ip, r3
 8000460:	fb0e 4419 	mls	r4, lr, r9, r4
 8000464:	408e      	lsls	r6, r1
 8000466:	fa20 f807 	lsr.w	r8, r0, r7
 800046a:	fb09 fa0c 	mul.w	sl, r9, ip
 800046e:	ea48 0806 	orr.w	r8, r8, r6
 8000472:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000476:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800047a:	45a2      	cmp	sl, r4
 800047c:	fa02 f201 	lsl.w	r2, r2, r1
 8000480:	fa00 f601 	lsl.w	r6, r0, r1
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x244>
 8000486:	18e4      	adds	r4, r4, r3
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d244      	bcs.n	8000518 <__udivmoddi4+0x2c4>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d942      	bls.n	8000518 <__udivmoddi4+0x2c4>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	441c      	add	r4, r3
 8000498:	eba4 040a 	sub.w	r4, r4, sl
 800049c:	fbb4 f0fe 	udiv	r0, r4, lr
 80004a0:	fb0e 4410 	mls	r4, lr, r0, r4
 80004a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80004a8:	fa1f f888 	uxth.w	r8, r8
 80004ac:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004b0:	45a4      	cmp	ip, r4
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x270>
 80004b4:	18e4      	adds	r4, r4, r3
 80004b6:	f100 3eff 	add.w	lr, r0, #4294967295
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2bc>
 80004bc:	45a4      	cmp	ip, r4
 80004be:	d927      	bls.n	8000510 <__udivmoddi4+0x2bc>
 80004c0:	3802      	subs	r0, #2
 80004c2:	441c      	add	r4, r3
 80004c4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c8:	fba0 8902 	umull	r8, r9, r0, r2
 80004cc:	eba4 0c0c 	sub.w	ip, r4, ip
 80004d0:	45cc      	cmp	ip, r9
 80004d2:	46c2      	mov	sl, r8
 80004d4:	46ce      	mov	lr, r9
 80004d6:	d315      	bcc.n	8000504 <__udivmoddi4+0x2b0>
 80004d8:	d012      	beq.n	8000500 <__udivmoddi4+0x2ac>
 80004da:	b155      	cbz	r5, 80004f2 <__udivmoddi4+0x29e>
 80004dc:	ebb6 030a 	subs.w	r3, r6, sl
 80004e0:	eb6c 060e 	sbc.w	r6, ip, lr
 80004e4:	fa06 f707 	lsl.w	r7, r6, r7
 80004e8:	40cb      	lsrs	r3, r1
 80004ea:	431f      	orrs	r7, r3
 80004ec:	40ce      	lsrs	r6, r1
 80004ee:	602f      	str	r7, [r5, #0]
 80004f0:	606e      	str	r6, [r5, #4]
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6f7      	b.n	80002ec <__udivmoddi4+0x98>
 80004fc:	4689      	mov	r9, r1
 80004fe:	e6de      	b.n	80002be <__udivmoddi4+0x6a>
 8000500:	4546      	cmp	r6, r8
 8000502:	d2ea      	bcs.n	80004da <__udivmoddi4+0x286>
 8000504:	ebb8 0a02 	subs.w	sl, r8, r2
 8000508:	eb69 0e03 	sbc.w	lr, r9, r3
 800050c:	3801      	subs	r0, #1
 800050e:	e7e4      	b.n	80004da <__udivmoddi4+0x286>
 8000510:	4670      	mov	r0, lr
 8000512:	e7d7      	b.n	80004c4 <__udivmoddi4+0x270>
 8000514:	4618      	mov	r0, r3
 8000516:	e78f      	b.n	8000438 <__udivmoddi4+0x1e4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7bd      	b.n	8000498 <__udivmoddi4+0x244>
 800051c:	4611      	mov	r1, r2
 800051e:	e776      	b.n	800040e <__udivmoddi4+0x1ba>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e744      	b.n	80003b0 <__udivmoddi4+0x15c>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0xe4>
 800052a:	3a02      	subs	r2, #2
 800052c:	443e      	add	r6, r7
 800052e:	e72b      	b.n	8000388 <__udivmoddi4+0x134>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_Init+0x28>)
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_Init+0x28>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f927 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f808 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f002 fec8 	bl	80032e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x54>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x58>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	fbb3 f3f1 	udiv	r3, r3, r1
 800057a:	fbb2 f3f3 	udiv	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f931 	bl	80007e6 <HAL_SYSTICK_Config>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	e00e      	b.n	80005ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d80a      	bhi.n	80005aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f907 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_InitTick+0x5c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000118 	.word	0x20000118
 80005b8:	20000004 	.word	0x20000004
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x1c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_IncTick+0x20>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <HAL_IncTick+0x20>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	20000004 	.word	0x20000004
 80005e0:	200003b8 	.word	0x200003b8

080005e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <HAL_GetTick+0x10>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	200003b8 	.word	0x200003b8

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff0 	bl	80005e4 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffe0 	bl	80005e4 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad2      	subs	r2, r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f7      	bcc.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff92 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff4b 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff60 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff92 	bl	80006f4 <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff61 	bl	80006a0 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffb0 	bl	8000754 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000800:	b08f      	sub	sp, #60	; 0x3c
 8000802:	af0a      	add	r7, sp, #40	; 0x28
 8000804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	e10f      	b.n	8000a30 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d106      	bne.n	8000830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f002 fede 	bl	80035ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2203      	movs	r2, #3
 8000834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800083c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f996 	bl	8001b80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	687e      	ldr	r6, [r7, #4]
 800085c:	466d      	mov	r5, sp
 800085e:	f106 0410 	add.w	r4, r6, #16
 8000862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800086e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000872:	1d33      	adds	r3, r6, #4
 8000874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	f001 f92a 	bl	8001ad0 <USB_CoreInit>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d005      	beq.n	800088e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2202      	movs	r2, #2
 8000886:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e0d0      	b.n	8000a30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f983 	bl	8001ba0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e04a      	b.n	8000936 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80008a0:	7bfa      	ldrb	r2, [r7, #15]
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	333d      	adds	r3, #61	; 0x3d
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	4613      	mov	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	333c      	adds	r3, #60	; 0x3c
 80008c4:	7bfa      	ldrb	r2, [r7, #15]
 80008c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80008c8:	7bfa      	ldrb	r2, [r7, #15]
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	b298      	uxth	r0, r3
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3342      	adds	r3, #66	; 0x42
 80008dc:	4602      	mov	r2, r0
 80008de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008e0:	7bfa      	ldrb	r2, [r7, #15]
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	1a9b      	subs	r3, r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	333f      	adds	r3, #63	; 0x3f
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80008f4:	7bfa      	ldrb	r2, [r7, #15]
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	3344      	adds	r3, #68	; 0x44
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000908:	7bfa      	ldrb	r2, [r7, #15]
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	4613      	mov	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	3348      	adds	r3, #72	; 0x48
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	3350      	adds	r3, #80	; 0x50
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	3301      	adds	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3af      	bcc.n	80008a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e044      	b.n	80009d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000946:	7bfa      	ldrb	r2, [r7, #15]
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4613      	mov	r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	1a9b      	subs	r3, r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4613      	mov	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	4613      	mov	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	4613      	mov	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800099e:	7bfa      	ldrb	r2, [r7, #15]
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	4613      	mov	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d3b5      	bcc.n	8000946 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	687e      	ldr	r6, [r7, #4]
 80009e2:	466d      	mov	r5, sp
 80009e4:	f106 0410 	add.w	r4, r6, #16
 80009e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80009f8:	1d33      	adds	r3, r6, #4
 80009fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009fc:	6838      	ldr	r0, [r7, #0]
 80009fe:	f001 f8f9 	bl	8001bf4 <USB_DevInit>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00d      	b.n	8000a30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 ff56 	bl	80028da <USB_DevDisconnect>

  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d101      	bne.n	8000a4e <HAL_PCD_Start+0x16>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e012      	b.n	8000a74 <HAL_PCD_Start+0x3c>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 ff24 	bl	80028a8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f87b 	bl	8001b60 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	4608      	mov	r0, r1
 8000a86:	4611      	mov	r1, r2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	70fb      	strb	r3, [r7, #3]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	803b      	strh	r3, [r7, #0]
 8000a92:	4613      	mov	r3, r2
 8000a94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da0f      	bge.n	8000ac2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	f003 020f 	and.w	r2, r3, #15
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	3338      	adds	r3, #56	; 0x38
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2201      	movs	r2, #1
 8000abe:	705a      	strb	r2, [r3, #1]
 8000ac0:	e00f      	b.n	8000ae2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	f003 020f 	and.w	r2, r3, #15
 8000ac8:	4613      	mov	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	3304      	adds	r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000aee:	883a      	ldrh	r2, [r7, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	78ba      	ldrb	r2, [r7, #2]
 8000af8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	785b      	ldrb	r3, [r3, #1]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000b0c:	78bb      	ldrb	r3, [r7, #2]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d102      	bne.n	8000b18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2200      	movs	r2, #0
 8000b16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d101      	bne.n	8000b26 <HAL_PCD_EP_Open+0xaa>
 8000b22:	2302      	movs	r3, #2
 8000b24:	e00e      	b.n	8000b44 <HAL_PCD_EP_Open+0xc8>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68f9      	ldr	r1, [r7, #12]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f9e6 	bl	8001f06 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8000b42:	7afb      	ldrb	r3, [r7, #11]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da0f      	bge.n	8000b80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	f003 020f 	and.w	r2, r3, #15
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	3338      	adds	r3, #56	; 0x38
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	3304      	adds	r3, #4
 8000b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	705a      	strb	r2, [r3, #1]
 8000b7e:	e00f      	b.n	8000ba0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	f003 020f 	and.w	r2, r3, #15
 8000b86:	4613      	mov	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	3304      	adds	r3, #4
 8000b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d101      	bne.n	8000bba <HAL_PCD_EP_Close+0x6e>
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e00e      	b.n	8000bd8 <HAL_PCD_EP_Close+0x8c>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68f9      	ldr	r1, [r7, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fa27 	bl	800201c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	460b      	mov	r3, r1
 8000bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bf0:	7afb      	ldrb	r3, [r7, #11]
 8000bf2:	f003 020f 	and.w	r2, r3, #15
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	3304      	adds	r3, #4
 8000c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c22:	7afb      	ldrb	r3, [r7, #11]
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000c2e:	7afb      	ldrb	r3, [r7, #11]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6979      	ldr	r1, [r7, #20]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fc66 	bl	8002510 <USB_EP0StartXfer>
 8000c44:	e005      	b.n	8000c52 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6979      	ldr	r1, [r7, #20]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fa6d 	bl	800212c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	f003 020f 	and.w	r2, r3, #15
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	440b      	add	r3, r1
 8000c7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	460b      	mov	r3, r1
 8000c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c9a:	7afb      	ldrb	r3, [r7, #11]
 8000c9c:	f003 020f 	and.w	r2, r3, #15
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	3338      	adds	r3, #56	; 0x38
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	3304      	adds	r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cca:	7afb      	ldrb	r3, [r7, #11]
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000cd6:	7afb      	ldrb	r3, [r7, #11]
 8000cd8:	f003 030f 	and.w	r3, r3, #15
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d106      	bne.n	8000cee <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6979      	ldr	r1, [r7, #20]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fc12 	bl	8002510 <USB_EP0StartXfer>
 8000cec:	e005      	b.n	8000cfa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6979      	ldr	r1, [r7, #20]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fa19 	bl	800212c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	f003 020f 	and.w	r2, r3, #15
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d901      	bls.n	8000d22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e04e      	b.n	8000dc0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da0f      	bge.n	8000d4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	f003 020f 	and.w	r2, r3, #15
 8000d30:	4613      	mov	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	1a9b      	subs	r3, r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	3338      	adds	r3, #56	; 0x38
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3304      	adds	r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2201      	movs	r2, #1
 8000d46:	705a      	strb	r2, [r3, #1]
 8000d48:	e00d      	b.n	8000d66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2200      	movs	r2, #0
 8000d64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_PCD_EP_SetStall+0x82>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e01c      	b.n	8000dc0 <HAL_PCD_EP_SetStall+0xbc>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68f9      	ldr	r1, [r7, #12]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fd16 	bl	80027c6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d108      	bne.n	8000db6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4610      	mov	r0, r2
 8000db2:	f001 fdab 	bl	800290c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d107      	bne.n	8000df6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	883a      	ldrh	r2, [r7, #0]
 8000dec:	0411      	lsls	r1, r2, #16
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
 8000df4:	e028      	b.n	8000e48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	0c1b      	lsrs	r3, r3, #16
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e00d      	b.n	8000e26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3340      	adds	r3, #64	; 0x40
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	0c1b      	lsrs	r3, r3, #16
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3301      	adds	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	7bfa      	ldrb	r2, [r7, #15]
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3ec      	bcc.n	8000e0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	883a      	ldrh	r2, [r7, #0]
 8000e3a:	0410      	lsls	r0, r2, #16
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	4302      	orrs	r2, r0
 8000e40:	3340      	adds	r3, #64	; 0x40
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	887a      	ldrh	r2, [r7, #2]
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e304      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8087 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e94:	4b92      	ldr	r3, [pc, #584]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d00c      	beq.n	8000eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea0:	4b8f      	ldr	r3, [pc, #572]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d112      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
 8000eac:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eba:	4b89      	ldr	r3, [pc, #548]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d06c      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x12c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d168      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e2de      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x76>
 8000edc:	4a80      	ldr	r2, [pc, #512]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e02e      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x98>
 8000ef2:	4a7b      	ldr	r2, [pc, #492]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4a78      	ldr	r2, [pc, #480]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	4b77      	ldr	r3, [pc, #476]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e01d      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0xbc>
 8000f16:	4a72      	ldr	r2, [pc, #456]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4a6f      	ldr	r2, [pc, #444]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	4b6e      	ldr	r3, [pc, #440]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e00b      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000f30:	4a6b      	ldr	r2, [pc, #428]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	4b6b      	ldr	r3, [pc, #428]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4a68      	ldr	r2, [pc, #416]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb48 	bl	80005e4 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fb44 	bl	80005e4 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e292      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0xe4>
 8000f76:	e014      	b.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb34 	bl	80005e4 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fb30 	bl	80005e4 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e27e      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x10c>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d063      	beq.n	8001076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fae:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d11c      	bne.n	8001000 <HAL_RCC_OscConfig+0x18c>
 8000fc6:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d116      	bne.n	8001000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_OscConfig+0x176>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e252      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	493d      	ldr	r1, [pc, #244]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	e03a      	b.n	8001076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d020      	beq.n	800104a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <HAL_RCC_OscConfig+0x270>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fae9 	bl	80005e4 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fae5 	bl	80005e4 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e233      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001034:	492a      	ldr	r1, [pc, #168]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e015      	b.n	8001076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_RCC_OscConfig+0x270>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fac8 	bl	80005e4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fac4 	bl	80005e4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e212      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d03a      	beq.n	80010f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d019      	beq.n	80010be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff faa8 	bl	80005e4 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff faa4 	bl	80005e4 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1f2      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fbba 	bl	8001830 <RCC_Delay>
 80010bc:	e01c      	b.n	80010f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fa8e 	bl	80005e4 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ca:	e00f      	b.n	80010ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fa8a 	bl	80005e4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d908      	bls.n	80010ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1d8      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	42420000 	.word	0x42420000
 80010e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ec:	4b9b      	ldr	r3, [pc, #620]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e9      	bne.n	80010cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a6 	beq.w	8001252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110a:	4b94      	ldr	r3, [pc, #592]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4a91      	ldr	r2, [pc, #580]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001118:	4b90      	ldr	r3, [pc, #576]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b8e      	ldr	r3, [pc, #568]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112e:	2301      	movs	r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <HAL_RCC_OscConfig+0x4ec>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113e:	4a88      	ldr	r2, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x4ec>)
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x4ec>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114a:	f7ff fa4b 	bl	80005e4 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001152:	f7ff fa47 	bl	80005e4 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e195      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	4b7e      	ldr	r3, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x4ec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x312>
 8001178:	4a78      	ldr	r2, [pc, #480]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800117a:	4b78      	ldr	r3, [pc, #480]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e02d      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x334>
 800118e:	4a73      	ldr	r2, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001190:	4b72      	ldr	r3, [pc, #456]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6213      	str	r3, [r2, #32]
 800119a:	4a70      	ldr	r2, [pc, #448]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6213      	str	r3, [r2, #32]
 80011a6:	e01c      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x356>
 80011b0:	4a6a      	ldr	r2, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6213      	str	r3, [r2, #32]
 80011bc:	4a67      	ldr	r2, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	e00b      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 80011ca:	4a64      	ldr	r2, [pc, #400]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011cc:	4b63      	ldr	r3, [pc, #396]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	4a61      	ldr	r2, [pc, #388]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011d8:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	f023 0304 	bic.w	r3, r3, #4
 80011e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d015      	beq.n	8001216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff f9fb 	bl	80005e4 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff f9f7 	bl	80005e4 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e143      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	4b54      	ldr	r3, [pc, #336]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ee      	beq.n	80011f2 <HAL_RCC_OscConfig+0x37e>
 8001214:	e014      	b.n	8001240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff f9e5 	bl	80005e4 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff f9e1 	bl	80005e4 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e12d      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	4b49      	ldr	r3, [pc, #292]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d105      	bne.n	8001252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001246:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 808c 	beq.w	8001374 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800125c:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d10e      	bne.n	8001288 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001272:	2b08      	cmp	r3, #8
 8001274:	d108      	bne.n	8001288 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001282:	d101      	bne.n	8001288 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e103      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b02      	cmp	r3, #2
 800128e:	d14e      	bne.n	800132e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0ef      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80012b0:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_RCC_OscConfig+0x4f0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff f995 	bl	80005e4 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80012be:	f7ff f991 	bl	80005e4 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0df      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80012dc:	491f      	ldr	r1, [pc, #124]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	4313      	orrs	r3, r2
 80012ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4313      	orrs	r3, r2
 80012fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_RCC_OscConfig+0x4f0>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff f96d 	bl	80005e4 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800130e:	f7ff f969 	bl	80005e4 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b64      	cmp	r3, #100	; 0x64
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0b7      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x49a>
 800132c:	e022      	b.n	8001374 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_RCC_OscConfig+0x4e8>)
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_RCC_OscConfig+0x4f0>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff f950 	bl	80005e4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001346:	e00f      	b.n	8001368 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001348:	f7ff f94c 	bl	80005e4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d908      	bls.n	8001368 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e09a      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e9      	bne.n	8001348 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8088 	beq.w	800148e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b08      	cmp	r3, #8
 8001388:	d068      	beq.n	800145c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d14d      	bne.n	800142e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <HAL_RCC_OscConfig+0x628>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff f924 	bl	80005e4 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff f920 	bl	80005e4 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e06e      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c6:	d10f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80013c8:	4933      	ldr	r1, [pc, #204]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d6:	4930      	ldr	r1, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	f023 020f 	bic.w	r2, r3, #15
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	482b      	ldr	r0, [pc, #172]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	430b      	orrs	r3, r1
 80013fc:	4313      	orrs	r3, r2
 80013fe:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <HAL_RCC_OscConfig+0x628>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff f8ed 	bl	80005e4 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff f8e9 	bl	80005e4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e037      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x59a>
 800142c:	e02f      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x628>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff f8d6 	bl	80005e4 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f8d2 	bl	80005e4 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e020      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x5c8>
 800145a:	e018      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	429a      	cmp	r2, r3
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	42420060 	.word	0x42420060

080014a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0d0      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0207 	and.w	r2, r3, #7
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d210      	bcs.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4967      	ldr	r1, [pc, #412]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	4b66      	ldr	r3, [pc, #408]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 0207 	bic.w	r2, r3, #7
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0207 	and.w	r2, r3, #7
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0b8      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014fc:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001514:	4a53      	ldr	r2, [pc, #332]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800151e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4950      	ldr	r1, [pc, #320]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d040      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e07f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e073      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e06b      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4939      	ldr	r1, [pc, #228]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 0203 	bic.w	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff f828 	bl	80005e4 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff f824 	bl	80005e4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e053      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0207 	and.w	r2, r3, #7
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4924      	ldr	r1, [pc, #144]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 0207 	bic.w	r2, r3, #7
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0207 	and.w	r2, r3, #7
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e032      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fc:	4919      	ldr	r1, [pc, #100]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161a:	4912      	ldr	r1, [pc, #72]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162e:	f000 f821 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001632:	4601      	mov	r1, r0
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	fa21 f303 	lsr.w	r3, r1, r3
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1cc>)
 8001648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff86 	bl	8000560 <HAL_InitTick>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000
 8001664:	40021000 	.word	0x40021000
 8001668:	08003c18 	.word	0x08003c18
 800166c:	20000118 	.word	0x20000118
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001678:	b093      	sub	sp, #76	; 0x4c
 800167a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800167e:	f107 061c 	add.w	r6, r7, #28
 8001682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001684:	c607      	stmia	r6!, {r0, r1, r2}
 8001686:	8033      	strh	r3, [r6, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001688:	4b65      	ldr	r3, [pc, #404]	; (8001820 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800168a:	f107 060c 	add.w	r6, r7, #12
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
 800169c:	2300      	movs	r3, #0
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016b0:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d002      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0x52>
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d003      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x58>
 80016c4:	e0a0      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016c6:	4b58      	ldr	r3, [pc, #352]	; (8001828 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80016ca:	e0a0      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016d8:	4413      	add	r3, r2
 80016da:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8086 	beq.w	80017f8 <HAL_RCC_GetSysClockFreq+0x184>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80016ec:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016f8:	4413      	add	r3, r2
 80016fa:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d063      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x160>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800170c:	4b45      	ldr	r3, [pc, #276]	; (8001824 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3301      	adds	r3, #1
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	3302      	adds	r3, #2
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	4618      	mov	r0, r3
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001732:	461a      	mov	r2, r3
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	fb02 fe01 	mul.w	lr, r2, r1
 800173c:	fb00 f603 	mul.w	r6, r0, r3
 8001740:	4476      	add	r6, lr
 8001742:	fba0 0102 	umull	r0, r1, r0, r2
 8001746:	1873      	adds	r3, r6, r1
 8001748:	4619      	mov	r1, r3
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	015e      	lsls	r6, r3, #5
 8001750:	607e      	str	r6, [r7, #4]
 8001752:	687e      	ldr	r6, [r7, #4]
 8001754:	ea46 66d2 	orr.w	r6, r6, r2, lsr #27
 8001758:	607e      	str	r6, [r7, #4]
 800175a:	0153      	lsls	r3, r2, #5
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001762:	1a12      	subs	r2, r2, r0
 8001764:	eb63 0301 	sbc.w	r3, r3, r1
 8001768:	019d      	lsls	r5, r3, #6
 800176a:	ea45 6592 	orr.w	r5, r5, r2, lsr #26
 800176e:	0194      	lsls	r4, r2, #6
 8001770:	1aa4      	subs	r4, r4, r2
 8001772:	eb65 0503 	sbc.w	r5, r5, r3
 8001776:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 800177a:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
 800177e:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 8001782:	4654      	mov	r4, sl
 8001784:	465d      	mov	r5, fp
 8001786:	1824      	adds	r4, r4, r0
 8001788:	eb45 0501 	adc.w	r5, r5, r1
 800178c:	ea4f 2945 	mov.w	r9, r5, lsl #9
 8001790:	ea49 59d4 	orr.w	r9, r9, r4, lsr #23
 8001794:	ea4f 2844 	mov.w	r8, r4, lsl #9
 8001798:	4644      	mov	r4, r8
 800179a:	464d      	mov	r5, r9
 800179c:	46a0      	mov	r8, r4
 800179e:	46a9      	mov	r9, r5
 80017a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	fb03 f502 	mul.w	r5, r3, r2
 80017b2:	fb01 f004 	mul.w	r0, r1, r4
 80017b6:	4428      	add	r0, r5
 80017b8:	fba1 3403 	umull	r3, r4, r1, r3
 80017bc:	1902      	adds	r2, r0, r4
 80017be:	4614      	mov	r4, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe fd2c 	bl	8000224 <__aeabi_uldivmod>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	647b      	str	r3, [r7, #68]	; 0x44
 80017d2:	e007      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x170>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80017d8:	fb02 f203 	mul.w	r2, r2, r3
 80017dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80017e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80017e8:	461a      	mov	r2, r3
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d108      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          pllclk = pllclk / 2;
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	647b      	str	r3, [r7, #68]	; 0x44
 80017f6:	e004      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x18e>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8001802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001804:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800180a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800180c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001810:	4618      	mov	r0, r3
 8001812:	374c      	adds	r7, #76	; 0x4c
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800181a:	bf00      	nop
 800181c:	08003bb0 	.word	0x08003bb0
 8001820:	08003bc0 	.word	0x08003bc0
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900

08001830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <RCC_Delay+0x34>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <RCC_Delay+0x38>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0a5b      	lsrs	r3, r3, #9
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800184c:	bf00      	nop
  }
  while (Delay --);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	60fa      	str	r2, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f9      	bne.n	800184c <RCC_Delay+0x1c>
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000118 	.word	0x20000118
 8001868:	10624dd3 	.word	0x10624dd3

0800186c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d07d      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4a88      	ldr	r2, [pc, #544]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b82      	ldr	r3, [pc, #520]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d118      	bne.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018c6:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d0:	f7fe fe88 	bl	80005e4 <HAL_GetTick>
 80018d4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	e008      	b.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7fe fe84 	bl	80005e4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0e5      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018fe:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d02e      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d027      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800191c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800192a:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d014      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7fe fe53 	bl	80005e4 <HAL_GetTick>
 800193e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7fe fe4f 	bl	80005e4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0ae      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ee      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001964:	4956      	ldr	r1, [pc, #344]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001976:	7efb      	ldrb	r3, [r7, #27]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001994:	494a      	ldr	r1, [pc, #296]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80019b2:	4943      	ldr	r1, [pc, #268]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80019d0:	493b      	ldr	r1, [pc, #236]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d148      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d138      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d009      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e042      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8001a30:	4923      	ldr	r1, [pc, #140]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001a42:	491f      	ldr	r1, [pc, #124]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fdc3 	bl	80005e4 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a62:	f7fe fdbf 	bl	80005e4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	; 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e020      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001a80:	e009      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42420440 	.word	0x42420440
 8001acc:	42420070 	.word	0x42420070

08001ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	f107 001c 	add.w	r0, r7, #28
 8001ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d122      	bne.n	8001b2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8001b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 ff3c 	bl	80029a0 <USB_CoreReset>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e010      	b.n	8001b50 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 ff30 	bl	80029a0 <USB_CoreReset>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b5c:	b004      	add	sp, #16
 8001b5e:	4770      	bx	lr

08001b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 0201 	bic.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d106      	bne.n	8001bcc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	e00b      	b.n	8001be4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e001      	b.n	8001be4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e003      	b.n	8001bec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8001be4:	2032      	movs	r0, #50	; 0x32
 8001be6:	f7fe fd07 	bl	80005f8 <HAL_Delay>

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e009      	b.n	8001c28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	3340      	adds	r3, #64	; 0x40
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	3301      	adds	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b0e      	cmp	r3, #14
 8001c2c:	d9f2      	bls.n	8001c14 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001c40:	461a      	mov	r2, r3
 8001c42:	2300      	movs	r3, #0
 8001c44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001c58:	2103      	movs	r1, #3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f93a 	bl	8001ed4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c60:	2110      	movs	r1, #16
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8f2 	bl	8001e4c <USB_FlushTxFifo>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <USB_DevInit+0x7e>
  {
    ret = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f90e 	bl	8001e94 <USB_FlushRxFifo>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <USB_DevInit+0x8e>
  {
    ret = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c94:	461a      	mov	r2, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e043      	b.n	8001d34 <USB_DevInit+0x140>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cc2:	d118      	bne.n	8001cf6 <USB_DevInit+0x102>
    {
      if (i == 0U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <USB_DevInit+0xec>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e013      	b.n	8001d08 <USB_DevInit+0x114>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cec:	461a      	mov	r2, r3
 8001cee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e008      	b.n	8001d08 <USB_DevInit+0x114>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d02:	461a      	mov	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d14:	461a      	mov	r2, r3
 8001d16:	2300      	movs	r3, #0
 8001d18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d26:	461a      	mov	r2, r3
 8001d28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	3301      	adds	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8b7      	bhi.n	8001cac <USB_DevInit+0xb8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e043      	b.n	8001dca <USB_DevInit+0x1d6>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d58:	d118      	bne.n	8001d8c <USB_DevInit+0x198>
    {
      if (i == 0U)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <USB_DevInit+0x182>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e013      	b.n	8001d9e <USB_DevInit+0x1aa>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d82:	461a      	mov	r2, r3
 8001d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e008      	b.n	8001d9e <USB_DevInit+0x1aa>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001daa:	461a      	mov	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d8b7      	bhi.n	8001d42 <USB_DevInit+0x14e>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001df4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <USB_DevInit+0x254>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f043 0208 	orr.w	r2, r3, #8
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e42:	b004      	add	sp, #16
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	803c3800 	.word	0x803c3800

08001e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	f043 0220 	orr.w	r2, r3, #32
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <USB_FlushTxFifo+0x44>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e006      	b.n	8001e86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d0f0      	beq.n	8001e66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	00030d40 	.word	0x00030d40

08001e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <USB_FlushRxFifo+0x3c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e006      	b.n	8001ec6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d0f0      	beq.n	8001ea6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	00030d40 	.word	0x00030d40

08001ed4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eea:	4619      	mov	r1, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d13c      	bne.n	8001f9c <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f28:	4618      	mov	r0, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d158      	bne.n	800200e <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f68:	4618      	mov	r0, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	78db      	ldrb	r3, [r3, #3]
 8001f84:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001f86:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	059b      	lsls	r3, r3, #22
 8001f8c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f98:	6003      	str	r3, [r0, #0]
 8001f9a:	e038      	b.n	800200e <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11b      	bne.n	800200e <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002000:	430b      	orrs	r3, r1
 8002002:	4313      	orrs	r3, r2
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	785b      	ldrb	r3, [r3, #1]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d137      	bne.n	80020a8 <USB_DeactivateEndpoint+0x8c>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203e:	4618      	mov	r0, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	b29b      	uxth	r3, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	4013      	ands	r3, r2
 800205c:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002064:	4618      	mov	r0, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	b29b      	uxth	r3, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	4013      	ands	r3, r2
 8002082:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002090:	4619      	mov	r1, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <USB_DeactivateEndpoint+0x108>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
 80020a6:	e036      	b.n	8002116 <USB_DeactivateEndpoint+0xfa>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ae:	4618      	mov	r0, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4013      	ands	r3, r2
 80020cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d4:	4618      	mov	r0, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4013      	ands	r3, r2
 80020f2:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002100:	4619      	mov	r1, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <USB_DeactivateEndpoint+0x10c>)
 8002112:	4013      	ands	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	ec337800 	.word	0xec337800
 8002128:	eff37800 	.word	0xeff37800

0800212c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	2b01      	cmp	r3, #1
 8002146:	f040 8117 	bne.w	8002378 <USB_EPStartXfer+0x24c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d135      	bne.n	80021be <USB_EPStartXfer+0x92>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215e:	4619      	mov	r1, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002176:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002184:	4619      	mov	r1, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002198:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a6:	4619      	mov	r1, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	0cdb      	lsrs	r3, r3, #19
 80021b8:	04db      	lsls	r3, r3, #19
 80021ba:	610b      	str	r3, [r1, #16]
 80021bc:	e07a      	b.n	80022b4 <USB_EPStartXfer+0x188>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ca:	4619      	mov	r1, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	0cdb      	lsrs	r3, r3, #19
 80021dc:	04db      	lsls	r3, r3, #19
 80021de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ec:	4619      	mov	r1, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002200:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002204:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002212:	4618      	mov	r0, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	440b      	add	r3, r1
 800222c:	1e59      	subs	r1, r3, #1
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	fbb1 f3f3 	udiv	r3, r1, r3
 8002236:	04d9      	lsls	r1, r3, #19
 8002238:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <USB_EPStartXfer+0x390>)
 800223a:	400b      	ands	r3, r1
 800223c:	4313      	orrs	r3, r2
 800223e:	6103      	str	r3, [r0, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224c:	4619      	mov	r1, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	4313      	orrs	r3, r2
 8002266:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	78db      	ldrb	r3, [r3, #3]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d121      	bne.n	80022b4 <USB_EPStartXfer+0x188>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227c:	4619      	mov	r1, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002290:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	4619      	mov	r1, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022b2:	610b      	str	r3, [r1, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c0:	4619      	mov	r1, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80022d4:	600b      	str	r3, [r1, #0]

    if (ep->type != EP_TYPE_ISOC)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d016      	beq.n	800230c <USB_EPStartXfer+0x1e0>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 810e 	beq.w	8002504 <USB_EPStartXfer+0x3d8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ee:	4618      	mov	r0, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	6343      	str	r3, [r0, #52]	; 0x34
 800230a:	e0fb      	b.n	8002504 <USB_EPStartXfer+0x3d8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <USB_EPStartXfer+0x214>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002328:	4619      	mov	r1, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233c:	600b      	str	r3, [r1, #0]
 800233e:	e010      	b.n	8002362 <USB_EPStartXfer+0x236>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234c:	4619      	mov	r1, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	600b      	str	r3, [r1, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68d9      	ldr	r1, [r3, #12]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	b29b      	uxth	r3, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9f8 	bl	8002766 <USB_WritePacket>
 8002376:	e0c5      	b.n	8002504 <USB_EPStartXfer+0x3d8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	4413      	add	r3, r2
 8002380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002384:	4619      	mov	r1, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	0cdb      	lsrs	r3, r3, #19
 8002396:	04db      	lsls	r3, r3, #19
 8002398:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a6:	4619      	mov	r1, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80023ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80023be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d125      	bne.n	8002414 <USB_EPStartXfer+0x2e8>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d4:	4619      	mov	r1, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	4313      	orrs	r3, r2
 80023ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fc:	4619      	mov	r1, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002410:	610b      	str	r3, [r1, #16]
 8002412:	e035      	b.n	8002480 <USB_EPStartXfer+0x354>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4413      	add	r3, r2
 800241e:	1e5a      	subs	r2, r3, #1
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	4618      	mov	r0, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	04d9      	lsls	r1, r3, #19
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <USB_EPStartXfer+0x390>)
 800244c:	400b      	ands	r3, r1
 800244e:	4313      	orrs	r3, r2
 8002450:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245e:	4618      	mov	r0, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	89f9      	ldrh	r1, [r7, #14]
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	4313      	orrs	r3, r2
 800247e:	6103      	str	r3, [r0, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d12c      	bne.n	80024e2 <USB_EPStartXfer+0x3b6>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d113      	bne.n	80024c0 <USB_EPStartXfer+0x394>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a4:	4619      	mov	r1, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024b8:	600b      	str	r3, [r1, #0]
 80024ba:	e012      	b.n	80024e2 <USB_EPStartXfer+0x3b6>
 80024bc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	4619      	mov	r1, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	4619      	mov	r1, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002502:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	2b01      	cmp	r3, #1
 800252a:	f040 80b4 	bne.w	8002696 <USB_EP0StartXfer+0x186>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d135      	bne.n	80025a2 <USB_EP0StartXfer+0x92>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002542:	4619      	mov	r1, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002556:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800255a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002568:	4619      	mov	r1, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800257c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258a:	4619      	mov	r1, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	0cdb      	lsrs	r3, r3, #19
 800259c:	04db      	lsls	r3, r3, #19
 800259e:	610b      	str	r3, [r1, #16]
 80025a0:	e052      	b.n	8002648 <USB_EP0StartXfer+0x138>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ae:	4619      	mov	r1, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	0cdb      	lsrs	r3, r3, #19
 80025c0:	04db      	lsls	r3, r3, #19
 80025c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d0:	4619      	mov	r1, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80025e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80025e8:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d903      	bls.n	80025fe <USB_EP0StartXfer+0xee>
      {
        ep->xfer_len = ep->maxpacket;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260a:	4619      	mov	r1, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800261e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262c:	4619      	mov	r1, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	4313      	orrs	r3, r2
 8002646:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002654:	4619      	mov	r1, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002668:	600b      	str	r3, [r1, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d073      	beq.n	800275a <USB_EP0StartXfer+0x24a>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002678:	4618      	mov	r0, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	6343      	str	r3, [r0, #52]	; 0x34
 8002694:	e061      	b.n	800275a <USB_EP0StartXfer+0x24a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	4619      	mov	r1, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	0cdb      	lsrs	r3, r3, #19
 80026b4:	04db      	lsls	r3, r3, #19
 80026b6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	4619      	mov	r1, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80026d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80026dc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <USB_EP0StartXfer+0x1de>
    {
      ep->xfer_len = ep->maxpacket;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fa:	4619      	mov	r1, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800270e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	4619      	mov	r1, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002734:	4313      	orrs	r3, r2
 8002736:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	4619      	mov	r1, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002758:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8002766:	b480      	push	{r7}
 8002768:	b089      	sub	sp, #36	; 0x24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	4611      	mov	r1, r2
 8002772:	461a      	mov	r2, r3
 8002774:	460b      	mov	r3, r1
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	4613      	mov	r3, r2
 800277a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8002784:	88bb      	ldrh	r3, [r7, #4]
 8002786:	3303      	adds	r3, #3
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e00f      	b.n	80027b2 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	031a      	lsls	r2, r3, #12
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	4413      	add	r3, r2
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	461a      	mov	r2, r3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6013      	str	r3, [r2, #0]
    pSrc++;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	3301      	adds	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3eb      	bcc.n	8002792 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3724      	adds	r7, #36	; 0x24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12e      	bne.n	8002840 <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db13      	blt.n	800281c <USB_EPSetStall+0x56>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002806:	4619      	mov	r1, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800281a:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002828:	4619      	mov	r1, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800283c:	600b      	str	r3, [r1, #0]
 800283e:	e02d      	b.n	800289c <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db13      	blt.n	800287a <USB_EPSetStall+0xb4>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	4619      	mov	r1, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002878:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002886:	4619      	mov	r1, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800289a:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 0302 	bic.w	r3, r3, #2
 80028c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80028ca:	2003      	movs	r0, #3
 80028cc:	f7fd fe94 	bl	80005f8 <HAL_Delay>

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ec:	461a      	mov	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f7fd fe7b 	bl	80005f8 <HAL_Delay>

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	333c      	adds	r3, #60	; 0x3c
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <USB_EP0_OutStart+0x90>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d90a      	bls.n	8002942 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800293c:	d101      	bne.n	8002942 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e027      	b.n	8002992 <USB_EP0_OutStart+0x86>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002962:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f043 0318 	orr.w	r3, r3, #24
 8002978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800298e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	4f54300a 	.word	0x4f54300a

080029a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3301      	adds	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <USB_CoreReset+0x60>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e01b      	b.n	80029f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	daf2      	bge.n	80029ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <USB_CoreReset+0x60>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e006      	b.n	80029f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d0f0      	beq.n	80029d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	00030d40 	.word	0x00030d40

08002a04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7c1b      	ldrb	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d115      	bne.n	8002a48 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a20:	2202      	movs	r2, #2
 8002a22:	2181      	movs	r1, #129	; 0x81
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fe58 	bl	80036da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a34:	2202      	movs	r2, #2
 8002a36:	2101      	movs	r1, #1
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fe4e 	bl	80036da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8002a46:	e012      	b.n	8002a6e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	2181      	movs	r1, #129	; 0x81
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fe43 	bl	80036da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	2101      	movs	r1, #1
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fe3a 	bl	80036da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002a6e:	2308      	movs	r3, #8
 8002a70:	2203      	movs	r2, #3
 8002a72:	2182      	movs	r1, #130	; 0x82
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fe30 	bl	80036da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002a80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002a84:	f000 fee6 	bl	8003854 <USBD_static_malloc>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e026      	b.n	8002aee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002aa6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7c1b      	ldrb	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fe86 	bl	80037e8 <USBD_LL_PrepareReceive>
 8002adc:	e007      	b.n	8002aee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ae4:	2340      	movs	r3, #64	; 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fe7d 	bl	80037e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002b08:	2181      	movs	r1, #129	; 0x81
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fe0b 	bl	8003726 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002b16:	2101      	movs	r1, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fe04 	bl	8003726 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002b26:	2182      	movs	r1, #130	; 0x82
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fdfc 	bl	8003726 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fe8c 	bl	800386c <USBD_static_free>
    pdev->pClassData = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002b76:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d039      	beq.n	8002c04 <USBD_CDC_Setup+0x9e>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d17c      	bne.n	8002c8e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	88db      	ldrh	r3, [r3, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d029      	beq.n	8002bf0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b25b      	sxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da11      	bge.n	8002bca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8002bb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	88d2      	ldrh	r2, [r2, #6]
 8002bb8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002bba:	6939      	ldr	r1, [r7, #16]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	88db      	ldrh	r3, [r3, #6]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 faab 	bl	800311e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8002bc8:	e068      	b.n	8002c9c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	785a      	ldrb	r2, [r3, #1]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	88db      	ldrh	r3, [r3, #6]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002be0:	6939      	ldr	r1, [r7, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	88db      	ldrh	r3, [r3, #6]
 8002be6:	461a      	mov	r2, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fab4 	bl	8003156 <USBD_CtlPrepareRx>
      break;
 8002bee:	e055      	b.n	8002c9c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	7850      	ldrb	r0, [r2, #1]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	4798      	blx	r3
      break;
 8002c02:	e04b      	b.n	8002c9c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b0a      	cmp	r3, #10
 8002c0a:	d017      	beq.n	8002c3c <USBD_CDC_Setup+0xd6>
 8002c0c:	2b0b      	cmp	r3, #11
 8002c0e:	d029      	beq.n	8002c64 <USBD_CDC_Setup+0xfe>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d133      	bne.n	8002c7c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	2202      	movs	r2, #2
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa79 	bl	800311e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8002c2c:	e02e      	b.n	8002c8c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fa0a 	bl	800304a <USBD_CtlError>
            ret = USBD_FAIL;
 8002c36:	2302      	movs	r3, #2
 8002c38:	75fb      	strb	r3, [r7, #23]
          break;
 8002c3a:	e027      	b.n	8002c8c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d107      	bne.n	8002c56 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002c46:	f107 030f 	add.w	r3, r7, #15
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa65 	bl	800311e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8002c54:	e01a      	b.n	8002c8c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8002c56:	6839      	ldr	r1, [r7, #0]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f9f6 	bl	800304a <USBD_CtlError>
            ret = USBD_FAIL;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	75fb      	strb	r3, [r7, #23]
          break;
 8002c62:	e013      	b.n	8002c8c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d00d      	beq.n	8002c8a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f9ea 	bl	800304a <USBD_CtlError>
            ret = USBD_FAIL;
 8002c76:	2302      	movs	r3, #2
 8002c78:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8002c7a:	e006      	b.n	8002c8a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8002c7c:	6839      	ldr	r1, [r7, #0]
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f9e3 	bl	800304a <USBD_CtlError>
          ret = USBD_FAIL;
 8002c84:	2302      	movs	r3, #2
 8002c86:	75fb      	strb	r3, [r7, #23]
          break;
 8002c88:	e000      	b.n	8002c8c <USBD_CDC_Setup+0x126>
          break;
 8002c8a:	bf00      	nop
      }
      break;
 8002c8c:	e006      	b.n	8002c9c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9da 	bl	800304a <USBD_CtlError>
      ret = USBD_FAIL;
 8002c96:	2302      	movs	r3, #2
 8002c98:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9a:	bf00      	nop
  }

  return ret;
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002cb8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002cc0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03a      	beq.n	8002d42 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	331c      	adds	r3, #28
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d029      	beq.n	8002d36 <USBD_CDC_DataIn+0x90>
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	331c      	adds	r3, #28
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	78f9      	ldrb	r1, [r7, #3]
 8002cf6:	68b8      	ldr	r0, [r7, #8]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4403      	add	r3, r0
 8002d02:	3344      	adds	r3, #68	; 0x44
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fbb2 f1f3 	udiv	r1, r2, r3
 8002d0a:	fb03 f301 	mul.w	r3, r3, r1
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d110      	bne.n	8002d36 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	331c      	adds	r3, #28
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002d28:	78f9      	ldrb	r1, [r7, #3]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fd37 	bl	80037a2 <USBD_LL_Transmit>
 8002d34:	e003      	b.n	8002d3e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fd62 	bl	800382e <USBD_LL_GetRxDataSize>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8002d90:	4611      	mov	r1, r2
 8002d92:	4798      	blx	r3

    return USBD_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002db0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <USBD_CDC_EP0_RxReady+0x46>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d010      	beq.n	8002de8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8002dd4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2243      	movs	r2, #67	; 0x43
 8002e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000090 	.word	0x20000090

08002e14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2243      	movs	r2, #67	; 0x43
 8002e20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8002e22:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000004c 	.word	0x2000004c

08002e34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2243      	movs	r2, #67	; 0x43
 8002e40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8002e42:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	200000d4 	.word	0x200000d4

08002e54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	220a      	movs	r2, #10
 8002e60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000008 	.word	0x20000008

08002e74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002eb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002ee2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002f06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d115      	bne.n	8002f48 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2181      	movs	r1, #129	; 0x81
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fc2f 	bl	80037a2 <USBD_LL_Transmit>

      return USBD_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e002      	b.n	8002f4e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7c1b      	ldrb	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f82:	2101      	movs	r1, #1
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fc2f 	bl	80037e8 <USBD_LL_PrepareReceive>
 8002f8a:	e007      	b.n	8002f9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f92:	2340      	movs	r3, #64	; 0x40
 8002f94:	2101      	movs	r1, #1
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fc26 	bl	80037e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e01a      	b.n	8002ff8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	79fa      	ldrb	r2, [r7, #7]
 8002fee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fb17 	bl	8003624 <USBD_LL_Init>

  return USBD_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e001      	b.n	8003026 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003022:	2302      	movs	r3, #2
 8003024:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fb32 	bl	80036a4 <USBD_LL_Start>

  return USBD_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fb84 	bl	8003764 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800305c:	2100      	movs	r1, #0
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb80 	bl	8003764 <USBD_LL_StallEP>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d032      	beq.n	80030e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f834 	bl	80030f0 <USBD_GetLen>
 8003088:	4603      	mov	r3, r0
 800308a:	3301      	adds	r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	75fa      	strb	r2, [r7, #23]
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	75fa      	strb	r2, [r7, #23]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4413      	add	r3, r2
 80030b4:	2203      	movs	r2, #3
 80030b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80030b8:	e012      	b.n	80030e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	75fa      	strb	r2, [r7, #23]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	60f9      	str	r1, [r7, #12]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	75fa      	strb	r2, [r7, #23]
 80030d6:	461a      	mov	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4413      	add	r3, r2
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e8      	bne.n	80030ba <USBD_GetString+0x4e>
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80030fc:	e005      	b.n	800310a <USBD_GetLen+0x1a>
  {
    len++;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	3301      	adds	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
    buf++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f5      	bne.n	80030fe <USBD_GetLen+0xe>
  }

  return len;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	4613      	mov	r3, r2
 800312a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	2100      	movs	r1, #0
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fb2b 	bl	80037a2 <USBD_LL_Transmit>

  return USBD_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2203      	movs	r2, #3
 8003168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	2100      	movs	r1, #0
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb30 	bl	80037e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <MX_GPIO_Init+0x40>)
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <MX_GPIO_Init+0x40>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6193      	str	r3, [r2, #24]
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <MX_GPIO_Init+0x40>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <MX_GPIO_Init+0x40>)
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <MX_GPIO_Init+0x40>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6193      	str	r3, [r2, #24]
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <MX_GPIO_Init+0x40>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]

}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40021000 	.word	0x40021000

080031d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031dc:	f7fd f9aa 	bl	8000534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031e0:	f000 f806 	bl	80031f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e4:	f7ff ffd6 	bl	8003194 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80031e8:	f000 f916 	bl	8003418 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <main+0x14>
	...

080031f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b09c      	sub	sp, #112	; 0x70
 80031f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031fa:	2238      	movs	r2, #56	; 0x38
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fcc2 	bl	8003b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2220      	movs	r2, #32
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fcb4 	bl	8003b88 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003220:	2301      	movs	r3, #1
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800322a:	2300      	movs	r3, #0
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800322e:	2301      	movs	r3, #1
 8003230:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8003232:	2300      	movs	r3, #0
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003236:	2302      	movs	r3, #2
 8003238:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003240:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003244:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8003246:	2300      	movs	r3, #0
 8003248:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800324a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd fe10 	bl	8000e74 <HAL_RCC_OscConfig>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800325a:	f000 f83c 	bl	80032d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325e:	230f      	movs	r3, #15
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003262:	2302      	movs	r3, #2
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800326a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003270:	2300      	movs	r3, #0
 8003272:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	2102      	movs	r1, #2
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f910 	bl	80014a0 <HAL_RCC_ClockConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003286:	f000 f826 	bl	80032d6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800328a:	2310      	movs	r3, #16
 800328c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fae9 	bl	800186c <HAL_RCCEx_PeriphCLKConfig>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80032a0:	f000 f819 	bl	80032d6 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <SystemClock_Config+0xc4>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	3770      	adds	r7, #112	; 0x70
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	42420070 	.word	0x42420070

080032b8 <CDC_ReceiveCallback>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallback(uint8_t* Buf, uint32_t Len)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(Buf, Len);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f969 	bl	80035a0 <CDC_Transmit_FS>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_MspInit+0x5c>)
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_MspInit+0x5c>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6193      	str	r3, [r2, #24]
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_MspInit+0x5c>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <HAL_MspInit+0x5c>)
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <HAL_MspInit+0x5c>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	61d3      	str	r3, [r2, #28]
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_MspInit+0x5c>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_MspInit+0x60>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_MspInit+0x60>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40021000 	.word	0x40021000
 8003344:	40010000 	.word	0x40010000

08003348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <HardFault_Handler+0x4>

0800335a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <MemManage_Handler+0x4>

08003360 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <BusFault_Handler+0x4>

08003366 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <UsageFault_Handler+0x4>

0800336c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003394:	f7fd f914 	bl	80005c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033a0:	4a1a      	ldr	r2, [pc, #104]	; (800340c <SystemInit+0x70>)
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <SystemInit+0x70>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80033ac:	4917      	ldr	r1, [pc, #92]	; (800340c <SystemInit+0x70>)
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <SystemInit+0x70>)
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <SystemInit+0x74>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033b8:	4a14      	ldr	r2, [pc, #80]	; (800340c <SystemInit+0x70>)
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <SystemInit+0x70>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033c8:	4a10      	ldr	r2, [pc, #64]	; (800340c <SystemInit+0x70>)
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <SystemInit+0x70>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <SystemInit+0x70>)
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <SystemInit+0x70>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033de:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 80033e0:	4a0a      	ldr	r2, [pc, #40]	; (800340c <SystemInit+0x70>)
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <SystemInit+0x70>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80033ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <SystemInit+0x70>)
 80033ee:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80033f2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <SystemInit+0x70>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <SystemInit+0x78>)
 80033fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003400:	609a      	str	r2, [r3, #8]
#endif 
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	f0ff0000 	.word	0xf0ff0000
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800341c:	2200      	movs	r2, #0
 800341e:	4912      	ldr	r1, [pc, #72]	; (8003468 <MX_USB_DEVICE_Init+0x50>)
 8003420:	4812      	ldr	r0, [pc, #72]	; (800346c <MX_USB_DEVICE_Init+0x54>)
 8003422:	f7ff fdc2 	bl	8002faa <USBD_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800342c:	f7ff ff53 	bl	80032d6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003430:	490f      	ldr	r1, [pc, #60]	; (8003470 <MX_USB_DEVICE_Init+0x58>)
 8003432:	480e      	ldr	r0, [pc, #56]	; (800346c <MX_USB_DEVICE_Init+0x54>)
 8003434:	f7ff fde4 	bl	8003000 <USBD_RegisterClass>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800343e:	f7ff ff4a 	bl	80032d6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003442:	490c      	ldr	r1, [pc, #48]	; (8003474 <MX_USB_DEVICE_Init+0x5c>)
 8003444:	4809      	ldr	r0, [pc, #36]	; (800346c <MX_USB_DEVICE_Init+0x54>)
 8003446:	f7ff fd15 	bl	8002e74 <USBD_CDC_RegisterInterface>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8003450:	f7ff ff41 	bl	80032d6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003454:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_USB_DEVICE_Init+0x54>)
 8003456:	f7ff fdec 	bl	8003032 <USBD_Start>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8003460:	f7ff ff39 	bl	80032d6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000012c 	.word	0x2000012c
 800346c:	200003bc 	.word	0x200003bc
 8003470:	20000014 	.word	0x20000014
 8003474:	2000011c 	.word	0x2000011c

08003478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800347c:	2200      	movs	r2, #0
 800347e:	4905      	ldr	r1, [pc, #20]	; (8003494 <CDC_Init_FS+0x1c>)
 8003480:	4805      	ldr	r0, [pc, #20]	; (8003498 <CDC_Init_FS+0x20>)
 8003482:	f7ff fd0d 	bl	8002ea0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003486:	4905      	ldr	r1, [pc, #20]	; (800349c <CDC_Init_FS+0x24>)
 8003488:	4803      	ldr	r0, [pc, #12]	; (8003498 <CDC_Init_FS+0x20>)
 800348a:	f7ff fd22 	bl	8002ed2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800348e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000a68 	.word	0x20000a68
 8003498:	200003bc 	.word	0x200003bc
 800349c:	20000680 	.word	0x20000680

080034a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80034a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
 80034bc:	4613      	mov	r3, r2
 80034be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	2b23      	cmp	r3, #35	; 0x23
 80034c4:	d84a      	bhi.n	800355c <CDC_Control_FS+0xac>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <CDC_Control_FS+0x1c>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	0800355d 	.word	0x0800355d
 80034d0:	0800355d 	.word	0x0800355d
 80034d4:	0800355d 	.word	0x0800355d
 80034d8:	0800355d 	.word	0x0800355d
 80034dc:	0800355d 	.word	0x0800355d
 80034e0:	0800355d 	.word	0x0800355d
 80034e4:	0800355d 	.word	0x0800355d
 80034e8:	0800355d 	.word	0x0800355d
 80034ec:	0800355d 	.word	0x0800355d
 80034f0:	0800355d 	.word	0x0800355d
 80034f4:	0800355d 	.word	0x0800355d
 80034f8:	0800355d 	.word	0x0800355d
 80034fc:	0800355d 	.word	0x0800355d
 8003500:	0800355d 	.word	0x0800355d
 8003504:	0800355d 	.word	0x0800355d
 8003508:	0800355d 	.word	0x0800355d
 800350c:	0800355d 	.word	0x0800355d
 8003510:	0800355d 	.word	0x0800355d
 8003514:	0800355d 	.word	0x0800355d
 8003518:	0800355d 	.word	0x0800355d
 800351c:	0800355d 	.word	0x0800355d
 8003520:	0800355d 	.word	0x0800355d
 8003524:	0800355d 	.word	0x0800355d
 8003528:	0800355d 	.word	0x0800355d
 800352c:	0800355d 	.word	0x0800355d
 8003530:	0800355d 	.word	0x0800355d
 8003534:	0800355d 	.word	0x0800355d
 8003538:	0800355d 	.word	0x0800355d
 800353c:	0800355d 	.word	0x0800355d
 8003540:	0800355d 	.word	0x0800355d
 8003544:	0800355d 	.word	0x0800355d
 8003548:	0800355d 	.word	0x0800355d
 800354c:	0800355d 	.word	0x0800355d
 8003550:	0800355d 	.word	0x0800355d
 8003554:	0800355d 	.word	0x0800355d
 8003558:	0800355d 	.word	0x0800355d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800355c:	bf00      	nop
  }

  return (USBD_OK);
 800355e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <CDC_Receive_FS+0x30>)
 800357a:	f7ff fcaa 	bl	8002ed2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800357e:	4807      	ldr	r0, [pc, #28]	; (800359c <CDC_Receive_FS+0x30>)
 8003580:	f7ff fce9 	bl	8002f56 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fe94 	bl	80032b8 <CDC_ReceiveCallback>
  return (USBD_OK);
 8003590:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200003bc 	.word	0x200003bc

080035a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <CDC_Transmit_FS+0x48>)
 80035b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00b      	b.n	80035de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <CDC_Transmit_FS+0x48>)
 80035ce:	f7ff fc67 	bl	8002ea0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80035d2:	4805      	ldr	r0, [pc, #20]	; (80035e8 <CDC_Transmit_FS+0x48>)
 80035d4:	f7ff fc90 	bl	8002ef8 <USBD_CDC_TransmitPacket>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200003bc 	.word	0x200003bc

080035ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fc:	d10b      	bne.n	8003616 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035fe:	4a08      	ldr	r2, [pc, #32]	; (8003620 <HAL_PCD_MspInit+0x34>)
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_PCD_MspInit+0x34>)
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003608:	6153      	str	r3, [r2, #20]
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_PCD_MspInit+0x34>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000

08003624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d130      	bne.n	8003696 <USBD_LL_Init+0x72>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003634:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003640:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800364a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <USBD_LL_Init+0x7c>)
 800364e:	2204      	movs	r2, #4
 8003650:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003654:	2202      	movs	r2, #2
 8003656:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <USBD_LL_Init+0x7c>)
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003666:	2200      	movs	r2, #0
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800366a:	480d      	ldr	r0, [pc, #52]	; (80036a0 <USBD_LL_Init+0x7c>)
 800366c:	f7fd f8c7 	bl	80007fe <HAL_PCD_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8003676:	f7ff fe2e 	bl	80032d6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	4808      	ldr	r0, [pc, #32]	; (80036a0 <USBD_LL_Init+0x7c>)
 800367e:	f7fd fbe9 	bl	8000e54 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	2100      	movs	r1, #0
 8003686:	4806      	ldr	r0, [pc, #24]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003688:	f7fd fb9e 	bl	8000dc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	2101      	movs	r1, #1
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <USBD_LL_Init+0x7c>)
 8003692:	f7fd fb99 	bl	8000dc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000e50 	.word	0x20000e50

080036a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd f9bc 	bl	8000a38 <HAL_PCD_Start>
 80036c0:	4603      	mov	r3, r0
 80036c2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f8da 	bl	8003880 <USBD_Get_USB_Status>
 80036cc:	4603      	mov	r3, r0
 80036ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	4608      	mov	r0, r1
 80036e4:	4611      	mov	r1, r2
 80036e6:	461a      	mov	r2, r3
 80036e8:	4603      	mov	r3, r0
 80036ea:	70fb      	strb	r3, [r7, #3]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70bb      	strb	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8003702:	78bb      	ldrb	r3, [r7, #2]
 8003704:	883a      	ldrh	r2, [r7, #0]
 8003706:	78f9      	ldrb	r1, [r7, #3]
 8003708:	f7fd f9b8 	bl	8000a7c <HAL_PCD_EP_Open>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f8b4 	bl	8003880 <USBD_Get_USB_Status>
 8003718:	4603      	mov	r3, r0
 800371a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800371c:	7bbb      	ldrb	r3, [r7, #14]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fa01 	bl	8000b4c <HAL_PCD_EP_Close>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f895 	bl	8003880 <USBD_Get_USB_Status>
 8003756:	4603      	mov	r3, r0
 8003758:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800375a:	7bbb      	ldrb	r3, [r7, #14]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fabe 	bl	8000d04 <HAL_PCD_EP_SetStall>
 8003788:	4603      	mov	r3, r0
 800378a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f876 	bl	8003880 <USBD_Get_USB_Status>
 8003794:	4603      	mov	r3, r0
 8003796:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8003798:	7bbb      	ldrb	r3, [r7, #14]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	461a      	mov	r2, r3
 80037ae:	460b      	mov	r3, r1
 80037b0:	72fb      	strb	r3, [r7, #11]
 80037b2:	4613      	mov	r3, r2
 80037b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80037c4:	893b      	ldrh	r3, [r7, #8]
 80037c6:	7af9      	ldrb	r1, [r7, #11]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	f7fd fa5e 	bl	8000c8a <HAL_PCD_EP_Transmit>
 80037ce:	4603      	mov	r3, r0
 80037d0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f853 	bl	8003880 <USBD_Get_USB_Status>
 80037da:	4603      	mov	r3, r0
 80037dc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80037de:	7dbb      	ldrb	r3, [r7, #22]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	461a      	mov	r2, r3
 80037f4:	460b      	mov	r3, r1
 80037f6:	72fb      	strb	r3, [r7, #11]
 80037f8:	4613      	mov	r3, r2
 80037fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800380a:	893b      	ldrh	r3, [r7, #8]
 800380c:	7af9      	ldrb	r1, [r7, #11]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	f7fd f9e6 	bl	8000be0 <HAL_PCD_EP_Receive>
 8003814:	4603      	mov	r3, r0
 8003816:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f830 	bl	8003880 <USBD_Get_USB_Status>
 8003820:	4603      	mov	r3, r0
 8003822:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8003824:	7dbb      	ldrb	r3, [r7, #22]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fa09 	bl	8000c5c <HAL_PCD_EP_GetRxCount>
 800384a:	4603      	mov	r3, r0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <USBD_static_malloc+0x14>)
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	20000198 	.word	0x20000198

0800386c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
	...

08003880 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d817      	bhi.n	80038c4 <USBD_Get_USB_Status+0x44>
 8003894:	a201      	add	r2, pc, #4	; (adr r2, 800389c <USBD_Get_USB_Status+0x1c>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038b3 	.word	0x080038b3
 80038a4:	080038b9 	.word	0x080038b9
 80038a8:	080038bf 	.word	0x080038bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]
    break;
 80038b0:	e00b      	b.n	80038ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80038b2:	2302      	movs	r3, #2
 80038b4:	73fb      	strb	r3, [r7, #15]
    break;
 80038b6:	e008      	b.n	80038ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
    break;
 80038bc:	e005      	b.n	80038ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80038be:	2302      	movs	r3, #2
 80038c0:	73fb      	strb	r3, [r7, #15]
    break;
 80038c2:	e002      	b.n	80038ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80038c4:	2302      	movs	r3, #2
 80038c6:	73fb      	strb	r3, [r7, #15]
    break;
 80038c8:	bf00      	nop
  }
  return usb_status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2212      	movs	r2, #18
 80038e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000148 	.word	0x20000148

080038fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2204      	movs	r2, #4
 800390c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800390e:	4b03      	ldr	r3, [pc, #12]	; (800391c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000015c 	.word	0x2000015c

08003920 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	4907      	ldr	r1, [pc, #28]	; (8003954 <USBD_FS_ProductStrDescriptor+0x34>)
 8003936:	4808      	ldr	r0, [pc, #32]	; (8003958 <USBD_FS_ProductStrDescriptor+0x38>)
 8003938:	f7ff fb98 	bl	800306c <USBD_GetString>
 800393c:	e004      	b.n	8003948 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	4904      	ldr	r1, [pc, #16]	; (8003954 <USBD_FS_ProductStrDescriptor+0x34>)
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <USBD_FS_ProductStrDescriptor+0x38>)
 8003944:	f7ff fb92 	bl	800306c <USBD_GetString>
  }
  return USBD_StrDesc;
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20001250 	.word	0x20001250
 8003958:	08003bd0 	.word	0x08003bd0

0800395c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4904      	ldr	r1, [pc, #16]	; (800397c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800396c:	4804      	ldr	r0, [pc, #16]	; (8003980 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800396e:	f7ff fb7d 	bl	800306c <USBD_GetString>
  return USBD_StrDesc;
 8003972:	4b02      	ldr	r3, [pc, #8]	; (800397c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20001250 	.word	0x20001250
 8003980:	08003be8 	.word	0x08003be8

08003984 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	221a      	movs	r2, #26
 8003994:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8003996:	f000 f843 	bl	8003a20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800399a:	4b02      	ldr	r3, [pc, #8]	; (80039a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000160 	.word	0x20000160

080039a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	4907      	ldr	r1, [pc, #28]	; (80039dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80039be:	4808      	ldr	r0, [pc, #32]	; (80039e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80039c0:	f7ff fb54 	bl	800306c <USBD_GetString>
 80039c4:	e004      	b.n	80039d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4904      	ldr	r1, [pc, #16]	; (80039dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80039cc:	f7ff fb4e 	bl	800306c <USBD_GetString>
  }
  return USBD_StrDesc;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20001250 	.word	0x20001250
 80039e0:	08003bfc 	.word	0x08003bfc

080039e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80039fa:	4808      	ldr	r0, [pc, #32]	; (8003a1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80039fc:	f7ff fb36 	bl	800306c <USBD_GetString>
 8003a00:	e004      	b.n	8003a0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003a06:	4805      	ldr	r0, [pc, #20]	; (8003a1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003a08:	f7ff fb30 	bl	800306c <USBD_GetString>
  }
  return USBD_StrDesc;
 8003a0c:	4b02      	ldr	r3, [pc, #8]	; (8003a18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20001250 	.word	0x20001250
 8003a1c:	08003c08 	.word	0x08003c08

08003a20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <Get_SerialNum+0x44>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <Get_SerialNum+0x48>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <Get_SerialNum+0x4c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003a46:	2208      	movs	r2, #8
 8003a48:	4909      	ldr	r1, [pc, #36]	; (8003a70 <Get_SerialNum+0x50>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f814 	bl	8003a78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003a50:	2204      	movs	r2, #4
 8003a52:	4908      	ldr	r1, [pc, #32]	; (8003a74 <Get_SerialNum+0x54>)
 8003a54:	68b8      	ldr	r0, [r7, #8]
 8003a56:	f000 f80f 	bl	8003a78 <IntToUnicode>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	1ffff7e8 	.word	0x1ffff7e8
 8003a68:	1ffff7ec 	.word	0x1ffff7ec
 8003a6c:	1ffff7f0 	.word	0x1ffff7f0
 8003a70:	20000162 	.word	0x20000162
 8003a74:	20000172 	.word	0x20000172

08003a78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]
 8003a8e:	e027      	b.n	8003ae0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	0f1b      	lsrs	r3, r3, #28
 8003a94:	2b09      	cmp	r3, #9
 8003a96:	d80b      	bhi.n	8003ab0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	0f12      	lsrs	r2, r2, #28
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	3230      	adds	r2, #48	; 0x30
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e00a      	b.n	8003ac6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4413      	add	r3, r2
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	0f12      	lsrs	r2, r2, #28
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	3237      	adds	r2, #55	; 0x37
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	3301      	adds	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
 8003ae0:	7dfa      	ldrb	r2, [r7, #23]
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3d3      	bcc.n	8003a90 <IntToUnicode+0x18>
  }
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
	...

08003af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003af4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003af6:	e003      	b.n	8003b00 <LoopCopyDataInit>

08003af8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003afa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003afc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003afe:	3104      	adds	r1, #4

08003b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b00:	480a      	ldr	r0, [pc, #40]	; (8003b2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b08:	d3f6      	bcc.n	8003af8 <CopyDataInit>
  ldr r2, =_sbss
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003b0c:	e002      	b.n	8003b14 <LoopFillZerobss>

08003b0e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b10:	f842 3b04 	str.w	r3, [r2], #4

08003b14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b18:	d3f9      	bcc.n	8003b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b1a:	f7ff fc3f 	bl	800339c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b1e:	f000 f80f 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b22:	f7ff fb59 	bl	80031d8 <main>
  bx lr
 8003b26:	4770      	bx	lr
  ldr r3, =_sidata
 8003b28:	08003c38 	.word	0x08003c38
  ldr r0, =_sdata
 8003b2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b30:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8003b34:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8003b38:	20001450 	.word	0x20001450

08003b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b3c:	e7fe      	b.n	8003b3c <ADC1_2_IRQHandler>
	...

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	2500      	movs	r5, #0
 8003b44:	4e0c      	ldr	r6, [pc, #48]	; (8003b78 <__libc_init_array+0x38>)
 8003b46:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b48:	1ba4      	subs	r4, r4, r6
 8003b4a:	10a4      	asrs	r4, r4, #2
 8003b4c:	42a5      	cmp	r5, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	f000 f822 	bl	8003b98 <_init>
 8003b54:	2500      	movs	r5, #0
 8003b56:	4e0a      	ldr	r6, [pc, #40]	; (8003b80 <__libc_init_array+0x40>)
 8003b58:	4c0a      	ldr	r4, [pc, #40]	; (8003b84 <__libc_init_array+0x44>)
 8003b5a:	1ba4      	subs	r4, r4, r6
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	42a5      	cmp	r5, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b68:	4798      	blx	r3
 8003b6a:	3501      	adds	r5, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b72:	4798      	blx	r3
 8003b74:	3501      	adds	r5, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08003c30 	.word	0x08003c30
 8003b7c:	08003c30 	.word	0x08003c30
 8003b80:	08003c30 	.word	0x08003c30
 8003b84:	08003c34 	.word	0x08003c34

08003b88 <memset>:
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4402      	add	r2, r0
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <memset+0xa>
 8003b90:	4770      	bx	lr
 8003b92:	f803 1b01 	strb.w	r1, [r3], #1
 8003b96:	e7f9      	b.n	8003b8c <memset+0x4>

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
